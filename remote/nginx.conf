map $http_upgrade $connection_upgrade {
    default upgrade;
    ''      close;
}

# Server that handles sending non-SSL traffic to SSL.
server {
    listen 80;
    return 301 https://$host$request_uri;    
}

server {
    listen 443 ssl;

    server_name ledsplay.davipetris.me;

    # Enable SSL for all locations.
    ssl_certificate /etc/nginx/certs/cert.pem;
    ssl_certificate_key /etc/nginx/certs/key.pem;

    ssl_session_timeout 1440m;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_prefer_server_ciphers off;
    ssl_ciphers "ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-SHA";
    ssl_ecdh_curve secp384r1;
    ssl_session_cache shared:SSL:10m;
    ssl_session_tickets off;
    add_header X-XSS-Protection             "1; mode=block";
    add_header Referrer-Policy "no-referrer-when-downgrade";

    location /static/ {
        root /usr/share/nginx/html;
    }

    location / {
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header Host $http_host;
	    proxy_set_header Upgrade $http_upgrade;
	    proxy_set_header Connection “upgrade”;
	    proxy_http_version 1.1;
        proxy_ssl_server_name on;
        proxy_ssl_session_reuse on;
        # we don't want nginx trying to do something clever with
        # redirects, we set the Host: header above already.
        proxy_redirect off;
        proxy_pass http://app:8000;
    }
}